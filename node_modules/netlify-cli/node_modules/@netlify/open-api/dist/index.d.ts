/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/sites": {
    /** **Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables. */
    get: operations["listSites"];
    /** **Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [createEnvVars](#tag/environmentVariables/operation/createEnvVars) to create environment variables for a site. */
    post: operations["createSite"];
  };
  "/sites/{site_id}": {
    /** **Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables. */
    get: operations["getSite"];
    delete: operations["deleteSite"];
    /** **Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [updateEnvVar](#tag/environmentVariables/operation/updateEnvVar) to update a site's environment variables. */
    patch: operations["updateSite"];
    parameters: {
      path: {
        site_id: string;
      };
    };
  };
  "/sites/{site_id}/ssl": {
    get: operations["showSiteTLSCertificate"];
    post: operations["provisionSiteTLSCertificate"];
  };
  "/accounts/{account_id}/env": {
    /** Returns all environment variables for an account or site. An account corresponds to a team in the Netlify UI. */
    get: operations["getEnvVars"];
    /** Creates new environment variables. Granular scopes are available on Pro plans and above. */
    post: operations["createEnvVars"];
  };
  "/api/v1/sites/{site_id}/env": {
    /** Returns all environment variables for a site. This convenience method behaves the same as `getEnvVars` but doesn't require an `account_id` as input. */
    get: operations["getSiteEnvVars"];
  };
  "/accounts/{account_id}/env/{key}": {
    /** Returns an individual environment variable. */
    get: operations["getEnvVar"];
    /** Updates an existing environment variable and all of its values. Existing values will be replaced by values provided. */
    put: operations["updateEnvVar"];
    /** Deletes an environment variable */
    delete: operations["deleteEnvVar"];
    /** Updates or creates a new value for an existing environment variable. */
    patch: operations["setEnvVarValue"];
  };
  "/accounts/{account_id}/env/{key}/value/{id}": {
    /** Deletes a specific environment variable value. */
    delete: operations["deleteEnvVarValue"];
  };
  "/sites/{site_id}/functions": {
    get: operations["searchSiteFunctions"];
  };
  "/sites/{site_id}/forms": {
    get: operations["listSiteForms"];
  };
  "/sites/{site_id}/forms/{form_id}": {
    delete: operations["deleteSiteForm"];
  };
  "/sites/{site_id}/submissions": {
    get: operations["listSiteSubmissions"];
  };
  "/sites/{site_id}/files": {
    get: operations["listSiteFiles"];
  };
  "/sites/{site_id}/assets": {
    get: operations["listSiteAssets"];
    post: operations["createSiteAsset"];
    parameters: {
      path: {
        site_id: string;
      };
    };
  };
  "/sites/{site_id}/assets/{asset_id}": {
    get: operations["getSiteAssetInfo"];
    put: operations["updateSiteAsset"];
    delete: operations["deleteSiteAsset"];
    parameters: {
      path: {
        site_id: string;
        asset_id: string;
      };
    };
  };
  "/sites/{site_id}/assets/{asset_id}/public_signature": {
    get: operations["getSiteAssetPublicSignature"];
    parameters: {
      path: {
        site_id: string;
        asset_id: string;
      };
    };
  };
  "/sites/{site_id}/files/{file_path}": {
    get: operations["getSiteFileByPathName"];
  };
  "/purge": {
    /** Purges cached content from Netlify's CDN. Supports purging by Cache-Tag. */
    post: operations["purgeCache"];
  };
  "/sites/{site_id}/snippets": {
    get: operations["listSiteSnippets"];
    post: operations["createSiteSnippet"];
    parameters: {
      path: {
        site_id: string;
      };
    };
  };
  "/sites/{site_id}/snippets/{snippet_id}": {
    get: operations["getSiteSnippet"];
    put: operations["updateSiteSnippet"];
    delete: operations["deleteSiteSnippet"];
    parameters: {
      path: {
        site_id: string;
        snippet_id: string;
      };
    };
  };
  "/sites/{site_id}/metadata": {
    get: operations["getSiteMetadata"];
    put: operations["updateSiteMetadata"];
    parameters: {
      path: {
        site_id: string;
      };
    };
  };
  "/sites/{site_id}/build_hooks": {
    get: operations["listSiteBuildHooks"];
    post: operations["createSiteBuildHook"];
    parameters: {
      path: {
        site_id: string;
      };
    };
  };
  "/sites/{site_id}/build_hooks/{id}": {
    get: operations["getSiteBuildHook"];
    put: operations["updateSiteBuildHook"];
    delete: operations["deleteSiteBuildHook"];
    parameters: {
      path: {
        site_id: string;
        id: string;
      };
    };
  };
  "/sites/{site_id}/deploys": {
    get: operations["listSiteDeploys"];
    post: operations["createSiteDeploy"];
    parameters: {
      path: {
        site_id: string;
      };
      query: {
        "deploy-previews"?: boolean;
        production?: boolean;
        state?:
          | "new"
          | "pending_review"
          | "accepted"
          | "rejected"
          | "enqueued"
          | "building"
          | "uploading"
          | "uploaded"
          | "preparing"
          | "prepared"
          | "processing"
          | "processed"
          | "ready"
          | "error"
          | "retrying";
        branch?: string;
        "latest-published"?: boolean;
      };
    };
  };
  "/sites/{site_id}/deploys/{deploy_id}": {
    get: operations["getSiteDeploy"];
    put: operations["updateSiteDeploy"];
    delete: operations["deleteSiteDeploy"];
  };
  "/deploys/{deploy_id}/cancel": {
    post: operations["cancelSiteDeploy"];
  };
  "/sites/{site_id}/deploys/{deploy_id}/restore": {
    post: operations["restoreSiteDeploy"];
  };
  "/sites/{site_id}/builds": {
    get: operations["listSiteBuilds"];
    post: operations["createSiteBuild"];
    parameters: {
      path: {
        site_id: string;
      };
    };
  };
  "/sites/{site_id}/deployed-branches": {
    get: operations["listSiteDeployedBranches"];
    parameters: {
      path: {
        site_id: string;
      };
    };
  };
  "/sites/{site_id}/unlink_repo": {
    /**
     * [Beta] Unlinks the repo from the site.
     *
     * This action will also:
     * - Delete associated deploy keys
     * - Delete outgoing webhooks for the repo
     * - Delete the site's build hooks
     */
    put: operations["unlinkSiteRepo"];
    parameters: {
      path: {
        site_id: string;
      };
    };
  };
  "/builds/{build_id}": {
    get: operations["getSiteBuild"];
    parameters: {
      path: {
        build_id: string;
      };
    };
  };
  "/builds/{build_id}/log": {
    post: operations["updateSiteBuildLog"];
    parameters: {
      path: {
        build_id: string;
      };
    };
  };
  "/builds/{build_id}/start": {
    post: operations["notifyBuildStart"];
    parameters: {
      path: {
        build_id: string;
      };
      query: {
        buildbot_version?: string;
        build_version?: string;
      };
    };
  };
  "/{account_id}/builds/status": {
    get: operations["getAccountBuildStatus"];
    parameters: {
      path: {
        account_id: string;
      };
    };
  };
  "/sites/{site_id}/dns": {
    get: operations["getDNSForSite"];
    put: operations["configureDNSForSite"];
    parameters: {
      path: {
        site_id: string;
      };
    };
  };
  "/sites/{site_id}/rollback": {
    put: operations["rollbackSiteDeploy"];
    parameters: {
      path: {
        site_id: string;
      };
    };
  };
  "/deploys/{deploy_id}": {
    get: operations["getDeploy"];
    delete: operations["deleteDeploy"];
  };
  "/deploys/{deploy_id}/lock": {
    post: operations["lockDeploy"];
  };
  "/deploys/{deploy_id}/unlock": {
    post: operations["unlockDeploy"];
  };
  "/deploys/{deploy_id}/files/{path}": {
    put: operations["uploadDeployFile"];
  };
  "/deploys/{deploy_id}/functions/{name}": {
    put: operations["uploadDeployFunction"];
  };
  "/forms/{form_id}/submissions": {
    get: operations["listFormSubmissions"];
  };
  "/hooks": {
    get: operations["listHooksBySiteId"];
    post: operations["createHookBySiteId"];
  };
  "/hooks/{hook_id}": {
    get: operations["getHook"];
    put: operations["updateHook"];
    delete: operations["deleteHook"];
    parameters: {
      path: {
        hook_id: string;
      };
    };
  };
  "/hooks/{hook_id}/enable": {
    post: operations["enableHook"];
    parameters: {
      path: {
        hook_id: string;
      };
    };
  };
  "/hooks/types": {
    get: operations["listHookTypes"];
  };
  "/oauth/tickets": {
    post: operations["createTicket"];
  };
  "/oauth/tickets/{ticket_id}": {
    get: operations["showTicket"];
  };
  "/oauth/tickets/{ticket_id}/exchange": {
    post: operations["exchangeTicket"];
  };
  "/deploy_keys": {
    get: operations["listDeployKeys"];
    post: operations["createDeployKey"];
  };
  "/deploy_keys/{key_id}": {
    get: operations["getDeployKey"];
    delete: operations["deleteDeployKey"];
    parameters: {
      path: {
        key_id: string;
      };
    };
  };
  "/{account_slug}/sites": {
    /** **Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables. */
    get: operations["listSitesForAccount"];
    /** **Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [createEnvVars](#tag/environmentVariables/operation/createEnvVars) to create environment variables for a site. */
    post: operations["createSiteInTeam"];
  };
  "/{account_slug}/members": {
    get: operations["listMembersForAccount"];
    post: operations["addMemberToAccount"];
    parameters: {
      path: {
        account_slug: string;
      };
    };
  };
  "/{account_slug}/members/{member_id}": {
    get: operations["getAccountMember"];
    put: operations["updateAccountMember"];
    delete: operations["removeAccountMember"];
    parameters: {
      path: {
        account_slug: string;
        member_id: string;
      };
    };
  };
  "/billing/payment_methods": {
    get: operations["listPaymentMethodsForUser"];
  };
  "/accounts/types": {
    get: operations["listAccountTypesForUser"];
  };
  "/accounts": {
    get: operations["listAccountsForUser"];
    post: operations["createAccount"];
  };
  "/accounts/{account_id}": {
    get: operations["getAccount"];
    put: operations["updateAccount"];
    delete: operations["cancelAccount"];
    parameters: {
      path: {
        account_id: string;
      };
    };
  };
  "/accounts/{account_id}/audit": {
    get: operations["listAccountAuditEvents"];
    parameters: {
      path: {
        account_id: string;
      };
    };
  };
  "/submissions/{submission_id}": {
    get: operations["listFormSubmission"];
    delete: operations["deleteSubmission"];
    parameters: {
      path: {
        submission_id: string;
      };
    };
  };
  "/sites/{site_id}/service-instances": {
    get: operations["listServiceInstancesForSite"];
    parameters: {
      path: {
        site_id: string;
      };
    };
  };
  "/sites/{site_id}/services/{addon}/instances": {
    post: operations["createServiceInstance"];
    parameters: {
      path: {
        site_id: string;
        addon: string;
      };
    };
  };
  "/sites/{site_id}/services/{addon}/instances/{instance_id}": {
    get: operations["showServiceInstance"];
    put: operations["updateServiceInstance"];
    delete: operations["deleteServiceInstance"];
    parameters: {
      path: {
        site_id: string;
        addon: string;
        instance_id: string;
      };
    };
  };
  "/services/": {
    get: operations["getServices"];
    parameters: {
      query: {
        search?: string;
      };
    };
  };
  "/services/{addonName}": {
    get: operations["showService"];
    parameters: {
      path: {
        addonName: string;
      };
    };
  };
  "/services/{addonName}/manifest": {
    get: operations["showServiceManifest"];
    parameters: {
      path: {
        addonName: string;
      };
    };
  };
  "/user": {
    get: operations["getCurrentUser"];
  };
  "/sites/{site_id}/traffic_splits": {
    get: operations["getSplitTests"];
    post: operations["createSplitTest"];
    parameters: {
      path: {
        site_id: string;
      };
    };
  };
  "/sites/{site_id}/traffic_splits/{split_test_id}": {
    get: operations["getSplitTest"];
    put: operations["updateSplitTest"];
    parameters: {
      path: {
        site_id: string;
        split_test_id: string;
      };
    };
  };
  "/sites/{site_id}/traffic_splits/{split_test_id}/publish": {
    post: operations["enableSplitTest"];
    parameters: {
      path: {
        site_id: string;
        split_test_id: string;
      };
    };
  };
  "/sites/{site_id}/traffic_splits/{split_test_id}/unpublish": {
    post: operations["disableSplitTest"];
    parameters: {
      path: {
        site_id: string;
        split_test_id: string;
      };
    };
  };
  "/dns_zones": {
    get: operations["getDnsZones"];
    post: operations["createDnsZone"];
  };
  "/dns_zones/{zone_id}": {
    get: operations["getDnsZone"];
    delete: operations["deleteDnsZone"];
    parameters: {
      path: {
        zone_id: string;
      };
    };
  };
  "/dns_zones/{zone_id}/transfer": {
    put: operations["transferDnsZone"];
    parameters: {
      path: {
        zone_id: string;
      };
      query: {
        /** the account of the dns zone */
        account_id: string;
        /** the account you want to transfer the dns zone to */
        transfer_account_id: string;
        /** the user you want to transfer the dns zone to */
        transfer_user_id: string;
      };
    };
  };
  "/dns_zones/{zone_id}/dns_records": {
    get: operations["getDnsRecords"];
    post: operations["createDnsRecord"];
    parameters: {
      path: {
        zone_id: string;
      };
    };
  };
  "/dns_zones/{zone_id}/dns_records/{dns_record_id}": {
    get: operations["getIndividualDnsRecord"];
    delete: operations["deleteDnsRecord"];
    parameters: {
      path: {
        zone_id: string;
        dns_record_id: string;
      };
    };
  };
  "/sites/{site_id}/dev_servers": {
    get: operations["listSiteDevServers"];
    post: operations["createSiteDevServer"];
    delete: operations["deleteSiteDevServers"];
    parameters: {
      path: {
        site_id: string;
      };
    };
  };
  "/sites/{site_id}/dev_servers/{dev_server_id}": {
    get: operations["getSiteDevServer"];
    parameters: {
      path: {
        site_id: string;
        dev_server_id: string;
      };
    };
  };
  "/sites/{site_id}/dev_servers/{dev_server_id}/activity": {
    parameters: {
      path: {
        site_id: string;
        dev_server_id: string;
      };
    };
  };
  "/sites/{site_id}/dev_server_hooks": {
    get: operations["listSiteDevServerHooks"];
    post: operations["createSiteDevServerHook"];
    parameters: {
      path: {
        site_id: string;
      };
    };
  };
  "/sites/{site_id}/dev_server_hooks/{id}": {
    get: operations["getSiteDevServerHook"];
    put: operations["updateSiteDevServerHook"];
    delete: operations["deleteSiteDevServerHook"];
    parameters: {
      path: {
        site_id: string;
        id: string;
      };
    };
  };
}

export interface components {
  schemas: {
    splitTestSetup: {
      branch_tests?: { [key: string]: unknown };
    };
    splitTests: components["schemas"]["splitTest"][];
    splitTest: {
      id?: string;
      site_id?: string;
      name?: string;
      path?: string;
      branches?: { [key: string]: unknown }[];
      active?: boolean;
      /** Format: dateTime */
      created_at?: string;
      /** Format: dateTime */
      updated_at?: string;
      /** Format: dateTime */
      unpublished_at?: string;
    };
    serviceInstance: {
      id?: string;
      url?: string;
      config?: { [key: string]: unknown };
      external_attributes?: { [key: string]: unknown };
      service_slug?: string;
      service_path?: string;
      service_name?: string;
      env?: { [key: string]: unknown };
      snippets?: { [key: string]: unknown }[];
      auth_url?: string;
      /** Format: dateTime */
      created_at?: string;
      /** Format: dateTime */
      updated_at?: string;
    };
    service: {
      id?: string;
      name?: string;
      slug?: string;
      service_path?: string;
      long_description?: string;
      description?: string;
      events?: { [key: string]: unknown }[];
      tags?: string[];
      icon?: string;
      manifest_url?: string;
      environments?: string[];
      /** Format: dateTime */
      created_at?: string;
      /** Format: dateTime */
      updated_at?: string;
    };
    site: {
      id?: string;
      state?: string;
      plan?: string;
      name?: string;
      custom_domain?: string;
      domain_aliases?: string[];
      branch_deploy_custom_domain?: string;
      deploy_preview_custom_domain?: string;
      password?: string;
      notification_email?: string;
      url?: string;
      ssl_url?: string;
      admin_url?: string;
      screenshot_url?: string;
      /** Format: dateTime */
      created_at?: string;
      /** Format: dateTime */
      updated_at?: string;
      user_id?: string;
      session_id?: string;
      ssl?: boolean;
      force_ssl?: boolean;
      managed_dns?: boolean;
      deploy_url?: string;
      published_deploy?: components["schemas"]["deploy"];
      account_name?: string;
      account_slug?: string;
      git_provider?: string;
      deploy_hook?: string;
      capabilities?: { [key: string]: { [key: string]: unknown } };
      processing_settings?: {
        html?: {
          pretty_urls?: boolean;
        };
      };
      build_settings?: components["schemas"]["repoInfo"];
      id_domain?: string;
      default_hooks_data?: {
        access_token?: string;
      };
      build_image?: string;
      prerender?: string;
      functions_region?: string;
    };
    siteSetup: components["schemas"]["site"] & {
      repo?: components["schemas"]["repoInfo"];
    };
    repoInfo: {
      id?: number;
      provider?: string;
      deploy_key_id?: string;
      repo_path?: string;
      repo_branch?: string;
      dir?: string;
      functions_dir?: string;
      cmd?: string;
      allowed_branches?: string[];
      public_repo?: boolean;
      private_logs?: boolean;
      repo_url?: string;
      env?: { [key: string]: string };
      installation_id?: number;
      stop_builds?: boolean;
    };
    submission: {
      id?: string;
      /** Format: int32 */
      number?: number;
      email?: string;
      name?: string;
      first_name?: string;
      last_name?: string;
      company?: string;
      summary?: string;
      body?: string;
      data?: { [key: string]: unknown };
      /** Format: dateTime */
      created_at?: string;
      site_url?: string;
    };
    /** @description Environment variable model definition */
    envVar: {
      /** @description The environment variable key, like ALGOLIA_ID (case-sensitive) */
      key?: string;
      /** @description The scopes that this environment variable is set to */
      scopes?: ("builds" | "functions" | "runtime" | "post-processing")[];
      /** @description An array of Value objects containing values and metadata */
      values?: components["schemas"]["envVarValue"][];
      /** @description Secret values are only readable by code running on Netlify’s systems. With secrets, only the local development context values are readable from the UI, API, and CLI. By default, environment variable values are not secret. (Enterprise plans only) */
      is_secret?: boolean;
      /**
       * Format: date-time
       * @description The timestamp of when the value was last updated
       */
      updated_at?: string;
      updated_by?: components["schemas"]["envVarUser"];
    };
    /** @description Environment variable value model definition */
    envVarValue: {
      /** @description The environment variable value's universally unique ID */
      id?: string;
      /** @description The environment variable's unencrypted value */
      value?: string;
      /**
       * @description The deploy context in which this value will be used. `dev` refers to local development when running `netlify dev`.
       * @enum {string}
       */
      context?:
        | "all"
        | "dev"
        | "branch-deploy"
        | "deploy-preview"
        | "production"
        | "branch";
      /** @description An additional parameter for custom branches. Currently, this is used for specifying a branch name when `context=branch`. */
      context_parameter?: string;
    };
    envVarUser: {
      /** @description The user's unique identifier */
      id?: string;
      /** @description The user's full name (first and last) */
      full_name?: string;
      /** @description The user's email address */
      email?: string;
      /** @description A URL pointing to the user's avatar */
      avatar_url?: string;
    };
    form: {
      id?: string;
      site_id?: string;
      name?: string;
      paths?: string[];
      /** Format: int32 */
      submission_count?: number;
      fields?: { [key: string]: unknown }[];
      /** Format: dateTime */
      created_at?: string;
    };
    hookType: {
      name?: string;
      events?: string[];
      fields?: { [key: string]: unknown }[];
    };
    hook: {
      id?: string;
      site_id?: string;
      type?: string;
      event?: string;
      data?: { [key: string]: unknown };
      /** Format: dateTime */
      created_at?: string;
      /** Format: dateTime */
      updated_at?: string;
      disabled?: boolean;
    };
    file: {
      id?: string;
      path?: string;
      sha?: string;
      mime_type?: string;
      /** Format: int64 */
      size?: number;
    };
    function: {
      id?: string;
      name?: string;
      sha?: string;
    };
    snippet: {
      /** Format: int32 */
      id?: number;
      site_id?: string;
      title?: string;
      general?: string;
      general_position?: string;
      goal?: string;
      goal_position?: string;
    };
    purge: {
      site_id?: string;
      site_slug?: string;
      cache_tags?: string[];
    };
    deploy: {
      id?: string;
      site_id?: string;
      user_id?: string;
      build_id?: string;
      state?: string;
      name?: string;
      url?: string;
      ssl_url?: string;
      admin_url?: string;
      deploy_url?: string;
      deploy_ssl_url?: string;
      screenshot_url?: string;
      review_id?: number;
      draft?: boolean;
      required?: string[];
      required_functions?: string[];
      error_message?: string;
      branch?: string;
      commit_ref?: string;
      commit_url?: string;
      skipped?: boolean;
      /** Format: dateTime */
      created_at?: string;
      /** Format: dateTime */
      updated_at?: string;
      /** Format: dateTime */
      published_at?: string;
      title?: string;
      context?: string;
      locked?: boolean;
      review_url?: string;
      framework?: string;
      function_schedules?: components["schemas"]["functionSchedule"][];
    };
    deployFiles: {
      files?: { [key: string]: unknown };
      draft?: boolean;
      async?: boolean;
      functions?: { [key: string]: unknown };
      function_schedules?: components["schemas"]["functionSchedule"][];
      functions_config?: {
        [key: string]: components["schemas"]["functionConfig"];
      };
      branch?: string;
      framework?: string;
      framework_version?: string;
    };
    pluginParams: {
      pinned_version?: string;
    };
    plugin: {
      package?: string;
      pinned_version?: string;
    };
    buildStatus: {
      active?: number;
      pending_concurrency?: number;
      enqueued?: number;
      build_count?: number;
      minutes?: {
        current?: number;
        current_average_sec?: number;
        previous?: number;
        /** Format: dateTime */
        period_start_date?: string;
        /** Format: dateTime */
        period_end_date?: string;
        /** Format: dateTime */
        last_updated_at?: string;
        included_minutes?: string;
        included_minutes_with_packs?: string;
      };
    };
    build: {
      id?: string;
      deploy_id?: string;
      sha?: string;
      done?: boolean;
      error?: string;
      /** Format: dateTime */
      created_at?: string;
    };
    buildLogMsg: {
      message?: string;
      error?: boolean;
      /** @enum {string} */
      section?:
        | "initializing"
        | "building"
        | "deploying"
        | "cleanup"
        | "postprocessing";
    };
    pluginRunData: {
      package?: string;
      version?: string;
      state?: string;
      reporting_event?: string;
      title?: string;
      summary?: string;
      text?: string;
    };
    pluginRun: components["schemas"]["pluginRunData"] & {
      deploy_id?: string;
    };
    metadata: { [key: string]: unknown };
    dnsZoneSetup: {
      account_slug?: string;
      site_id?: string;
      name?: string;
    };
    dnsZones: components["schemas"]["dnsZone"][];
    dnsZone: {
      id?: string;
      name?: string;
      errors?: string[];
      supported_record_types?: string[];
      user_id?: string;
      /** Format: dateTime */
      created_at?: string;
      /** Format: dateTime */
      updated_at?: string;
      records?: components["schemas"]["dnsRecord"][];
      dns_servers?: string[];
      account_id?: string;
      site_id?: string;
      account_slug?: string;
      account_name?: string;
      domain?: string;
      ipv6_enabled?: boolean;
      dedicated?: boolean;
    };
    dnsRecordCreate: {
      type?: string;
      hostname?: string;
      value?: string;
      /** Format: int64 */
      ttl?: number;
      /** Format: int64 */
      priority?: number;
      /** Format: int64 */
      weight?: number;
      /** Format: int64 */
      port?: number;
      /** Format: int64 */
      flag?: number;
      tag?: string;
    };
    dnsRecords: components["schemas"]["dnsRecord"][];
    dnsRecord: {
      id?: string;
      hostname?: string;
      type?: string;
      value?: string;
      /** Format: int64 */
      ttl?: number;
      /** Format: int64 */
      priority?: number;
      dns_zone_id?: string;
      site_id?: string;
      flag?: number;
      tag?: string;
      managed?: boolean;
    };
    sniCertificate: {
      state?: string;
      domains?: string[];
      /** Format: dateTime */
      created_at?: string;
      /** Format: dateTime */
      updated_at?: string;
      /** Format: dateTime */
      expires_at?: string;
    };
    ticket: {
      id?: string;
      client_id?: string;
      authorized?: boolean;
      /** Format: dateTime */
      created_at?: string;
    };
    accessToken: {
      id?: string;
      access_token?: string;
      user_id?: string;
      user_email?: string;
      /** Format: dateTime */
      created_at?: string;
    };
    asset: {
      id?: string;
      site_id?: string;
      creator_id?: string;
      name?: string;
      state?: string;
      content_type?: string;
      url?: string;
      key?: string;
      visibility?: string;
      /** Format: int64 */
      size?: number;
      /** Format: dateTime */
      created_at?: string;
      /** Format: dateTime */
      updated_at?: string;
    };
    assetForm: {
      url?: string;
      fields?: { [key: string]: string };
    };
    assetSignature: {
      form?: components["schemas"]["assetForm"];
      asset?: components["schemas"]["asset"];
    };
    assetPublicSignature: {
      url?: string;
    };
    deployKey: {
      id?: string;
      public_key?: string;
      /** Format: dateTime */
      created_at?: string;
    };
    member: {
      id?: string;
      full_name?: string;
      email?: string;
      avatar?: string;
      role?: string;
    };
    paymentMethod: {
      id?: string;
      method_name?: string;
      type?: string;
      state?: string;
      data?: {
        card_type?: string;
        last4?: string;
        email?: string;
      };
      /** Format: dateTime */
      created_at?: string;
      /** Format: dateTime */
      updated_at?: string;
    };
    accountType: {
      id?: string;
      name?: string;
      description?: string;
      capabilities?: { [key: string]: unknown };
      monthly_dollar_price?: number;
      yearly_dollar_price?: number;
      monthly_seats_addon_dollar_price?: number;
      yearly_seats_addon_dollar_price?: number;
    };
    accountSetup: {
      name: string;
      type_id: string;
      payment_method_id?: string;
      /** @enum {string} */
      period?: "monthly" | "yearly";
      extra_seats_block?: number;
    };
    accountUpdateSetup: {
      name?: string;
      slug?: string;
      type_id?: string;
      extra_seats_block?: number;
      billing_name?: string;
      billing_email?: string;
      billing_details?: string;
    };
    accountAddMemberSetup: {
      /** @enum {string} */
      role?: "Owner" | "Developer" | "Billing Admin" | "Reviewer";
      email?: string;
    };
    accountUpdateMemberSetup: {
      /** @enum {string} */
      role?: "Owner" | "Developer" | "Billing Admin" | "Reviewer";
      /** @enum {string} */
      site_access?: "all" | "none" | "selected";
      site_ids?: string[];
    };
    accountMembership: {
      id?: string;
      name?: string;
      slug?: string;
      type?: string;
      capabilities?: {
        sites?: components["schemas"]["accountUsageCapability"];
        collaborators?: components["schemas"]["accountUsageCapability"];
      };
      billing_name?: string;
      billing_email?: string;
      billing_details?: string;
      billing_period?: string;
      payment_method_id?: string;
      type_name?: string;
      type_id?: string;
      owner_ids?: string[];
      roles_allowed?: string[];
      /** Format: dateTime */
      created_at?: string;
      /** Format: dateTime */
      updated_at?: string;
    };
    auditLog: {
      id?: string;
      account_id?: string;
      payload?: {
        actor_id?: string;
        actor_name?: string;
        actor_email?: string;
        action?: string;
        /** Format: dateTime */
        timestamp?: string;
        log_type?: string;
      } & { [key: string]: { [key: string]: unknown } };
    };
    accountUsageCapability: {
      included?: number;
      used?: number;
    };
    buildSetup: {
      image?: string;
      clear_cache?: boolean;
    };
    buildHookSetup: {
      title?: string;
      branch?: string;
    };
    buildHook: {
      id?: string;
      title?: string;
      branch?: string;
      url?: string;
      site_id?: string;
      /** Format: dateTime */
      created_at?: string;
    };
    deployedBranch: {
      id?: string;
      deploy_id?: string;
      name?: string;
      slug?: string;
      url?: string;
      ssl_url?: string;
    };
    user: {
      id?: string;
      uid?: string;
      full_name?: string;
      avatar_url?: string;
      email?: string;
      affiliate_id?: string;
      /** Format: int64 */
      site_count?: number;
      /** Format: dateTime */
      created_at?: string;
      /** Format: dateTime */
      last_login?: string;
      login_providers?: string[];
      onboarding_progress?: {
        slides?: string;
      };
    };
    error: {
      /** Format: int64 */
      code?: number;
      message: string;
    };
    functionSchedule: {
      name?: string;
      cron?: string;
    };
    functionConfig: {
      display_name?: string;
      generator?: string;
      build_data?: { [key: string]: unknown };
      routes?: components["schemas"]["functionRoute"][];
      excluded_routes?: components["schemas"]["excludedFunctionRoute"][];
      priority?: number;
      traffic_rules?: components["schemas"]["trafficRulesConfig"];
    };
    functionRoute: {
      pattern?: string;
      literal?: string;
      expression?: string;
      methods?: ("GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "OPTIONS")[];
      prefer_static?: boolean;
    };
    excludedFunctionRoute: {
      pattern?: string;
      literal?: string;
      expression?: string;
    };
    trafficRulesConfig: {
      action?: {
        type?: string;
        config?: {
          to?: string;
          rate_limit_config?: components["schemas"]["trafficRulesRateLimitConfig"];
          aggregate?: components["schemas"]["trafficRulesAggregateConfig"];
        };
      };
    };
    trafficRulesRateLimitConfig: {
      /** @enum {string} */
      algorithm?: "sliding_window";
      window_size?: number;
      window_limit?: number;
    };
    trafficRulesAggregateConfig: {
      keys?: {
        /** @enum {string} */
        type?: "ip" | "domain";
      }[];
    };
    siteFunction: {
      branch?: string;
      /** Format: dateTime */
      created_at?: string;
      functions?: { [key: string]: unknown }[];
      id?: string;
      log_type?: string;
      provider?: string;
    };
    devServer: {
      id?: string;
      site_id?: string;
      branch?: string;
      url?: string;
      state?: string;
      /** Format: dateTime */
      created_at?: string;
      /** Format: dateTime */
      updated_at?: string;
      /** Format: dateTime */
      starting_at?: string;
      /** Format: dateTime */
      error_at?: string;
      /** Format: dateTime */
      live_at?: string;
      /** Format: dateTime */
      done_at?: string;
      title?: string;
    };
    devServerHook: {
      id?: string;
      title?: string;
      branch?: string;
      url?: string;
      site_id?: string;
      /** Format: dateTime */
      created_at?: string;
      /** @enum {string} */
      type?: "new_dev_server" | "content_refresh";
    };
    devServerHookSetup: {
      title?: string;
      branch?: string;
      /** @enum {string} */
      type?: "new_dev_server" | "content_refresh";
    };
  };
  responses: {
    /** error */
    error: {
      content: {
        "application/json": components["schemas"]["error"];
      };
    };
  };
  parameters: {
    page: number;
    perPage: number;
    retryCount: number;
  };
  requestBodies: {
    devServerHookSetup: {
      content: {
        "application/json": components["schemas"]["devServerHookSetup"];
      };
    };
    createServiceInstanceConfig: {
      content: {
        "application/json": { [key: string]: unknown };
      };
    };
    snippet: {
      content: {
        "application/json": components["schemas"]["snippet"];
      };
    };
    deployFiles: {
      content: {
        "application/json": components["schemas"]["deployFiles"];
      };
    };
    uploadDeployFileFileBody: {
      content: {
        "application/octet-stream": string;
      };
    };
    siteSetup: {
      content: {
        "application/json": components["schemas"]["siteSetup"];
      };
    };
    buildHookSetup: {
      content: {
        "application/json": components["schemas"]["buildHookSetup"];
      };
    };
    hook: {
      content: {
        "application/json": components["schemas"]["hook"];
      };
    };
    splitTestSetup: {
      content: {
        "application/json": components["schemas"]["splitTestSetup"];
      };
    };
  };
}

export interface operations {
  /** **Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables. */
  listSites: {
    parameters: {
      query: {
        name?: string;
        filter?: "all" | "owner" | "guest";
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["perPage"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["site"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  /** **Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [createEnvVars](#tag/environmentVariables/operation/createEnvVars) to create environment variables for a site. */
  createSite: {
    parameters: {
      query: {
        configure_dns?: boolean;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["site"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: components["requestBodies"]["siteSetup"];
  };
  /** **Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables. */
  getSite: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["site"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  deleteSite: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** Deleted */
      204: never;
      default: components["responses"]["error"];
    };
  };
  /** **Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [updateEnvVar](#tag/environmentVariables/operation/updateEnvVar) to update a site's environment variables. */
  updateSite: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["site"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: components["requestBodies"]["siteSetup"];
  };
  showSiteTLSCertificate: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["sniCertificate"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  provisionSiteTLSCertificate: {
    parameters: {
      path: {
        site_id: string;
      };
      query: {
        certificate?: string;
        key?: string;
        ca_certificates?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["sniCertificate"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  /** Returns all environment variables for an account or site. An account corresponds to a team in the Netlify UI. */
  getEnvVars: {
    parameters: {
      path: {
        /** Scope response to account_id */
        account_id: string;
      };
      query: {
        /** Filter by deploy context */
        context_name?:
          | "all"
          | "dev"
          | "branch-deploy"
          | "deploy-preview"
          | "production";
        /** Filter by scope */
        scope?: "builds" | "functions" | "runtime" | "post-processing";
        /** If specified, only return environment variables set on this site */
        site_id?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["envVar"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  /** Creates new environment variables. Granular scopes are available on Pro plans and above. */
  createEnvVars: {
    parameters: {
      path: {
        /** Scope response to account_id */
        account_id: string;
      };
      query: {
        /** If provided, create an environment variable on the site level, not the account level */
        site_id?: string;
      };
    };
    responses: {
      /** OK */
      201: {
        content: {
          "application/json": components["schemas"]["envVar"][];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The existing or new name of the key, if you wish to rename it (case-sensitive) */
          key?: string;
          /** @description The scopes that this environment variable is set to (Pro plans and above) */
          scopes?: ("builds" | "functions" | "runtime" | "post-processing")[];
          values?: components["schemas"]["envVarValue"][];
          /** @description Secret values are only readable by code running on Netlify’s systems. With secrets, only the local development context values are readable from the UI, API, and CLI. By default, environment variable values are not secret. (Enterprise plans only) */
          is_secret?: boolean;
        }[];
      };
    };
  };
  /** Returns all environment variables for a site. This convenience method behaves the same as `getEnvVars` but doesn't require an `account_id` as input. */
  getSiteEnvVars: {
    parameters: {
      query: {
        /** Filter by deploy context */
        context_name?:
          | "all"
          | "dev"
          | "branch-deploy"
          | "deploy-preview"
          | "production";
        /** Filter by scope */
        scope?: "builds" | "functions" | "runtime" | "post_processing";
      };
      path: {
        /** Scope response to site_id */
        site_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["envVar"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  /** Returns an individual environment variable. */
  getEnvVar: {
    parameters: {
      path: {
        /** Scope response to account_id */
        account_id: string;
        /** The environment variable key (case-sensitive) */
        key: string;
      };
      query: {
        /** If provided, return the environment variable for a specific site (no merging is performed) */
        site_id?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["envVar"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  /** Updates an existing environment variable and all of its values. Existing values will be replaced by values provided. */
  updateEnvVar: {
    parameters: {
      path: {
        /** Scope response to account_id */
        account_id: string;
        /** The existing environment variable key name (case-sensitive) */
        key: string;
      };
      query: {
        /** If provided, update an environment variable set on this site */
        site_id?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["envVar"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The existing or new name of the key, if you wish to rename it (case-sensitive) */
          key?: string;
          /** @description The scopes that this environment variable is set to (Pro plans and above) */
          scopes?: ("builds" | "functions" | "runtime" | "post-processing")[];
          values?: components["schemas"]["envVarValue"][];
          /** @description Secret values are only readable by code running on Netlify’s systems. With secrets, only the local development context values are readable from the UI, API, and CLI. By default, environment variable values are not secret. (Enterprise plans only) */
          is_secret?: boolean;
        };
      };
    };
  };
  /** Deletes an environment variable */
  deleteEnvVar: {
    parameters: {
      path: {
        /** Scope response to account_id */
        account_id: string;
        /** The environment variable key (case-sensitive) */
        key: string;
      };
      query: {
        /** If provided, delete the environment variable from this site */
        site_id?: string;
      };
    };
    responses: {
      /** No Content (success) */
      204: never;
      default: components["responses"]["error"];
    };
  };
  /** Updates or creates a new value for an existing environment variable. */
  setEnvVarValue: {
    parameters: {
      path: {
        /** Scope response to account_id */
        account_id: string;
        /** The existing environment variable key name (case-sensitive) */
        key: string;
      };
      query: {
        /** If provided, update an environment variable set on this site */
        site_id?: string;
      };
    };
    responses: {
      /** Created (success) */
      201: {
        content: {
          "application/json": components["schemas"]["envVar"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The deploy context in which this value will be used. `dev` refers to local development when running `netlify dev`. `branch` must be provided with a value in `context_parameter`.
           * @enum {string}
           */
          context?:
            | "all"
            | "dev"
            | "branch-deploy"
            | "deploy-preview"
            | "production"
            | "branch";
          /** @description An additional parameter for custom branches. Currently, this is used for providing a branch name when `context=branch`. */
          context_parameter?: string;
          /** @description The environment variable's unencrypted value */
          value?: string;
        };
      };
    };
  };
  /** Deletes a specific environment variable value. */
  deleteEnvVarValue: {
    parameters: {
      path: {
        /** Scope response to account_id */
        account_id: string;
        /** The environment variable value's ID */
        id: string;
        /** The environment variable key name (case-sensitive) */
        key: string;
      };
      query: {
        /** If provided, delete the value from an environment variable on this site */
        site_id?: string;
      };
    };
    responses: {
      /** No Content (success) */
      204: never;
      default: components["responses"]["error"];
    };
  };
  searchSiteFunctions: {
    parameters: {
      path: {
        site_id: string;
      };
      query: {
        filter?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["siteFunction"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  listSiteForms: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["form"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  deleteSiteForm: {
    parameters: {
      path: {
        site_id: string;
        form_id: string;
      };
    };
    responses: {
      /** Deleted */
      204: never;
      default: components["responses"]["error"];
    };
  };
  listSiteSubmissions: {
    parameters: {
      path: {
        site_id: string;
      };
      query: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["perPage"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["submission"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  listSiteFiles: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["file"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  listSiteAssets: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["asset"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  createSiteAsset: {
    parameters: {
      path: {
        site_id: string;
      };
      query: {
        name: string;
        size: number;
        content_type: string;
        visibility?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["assetSignature"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  getSiteAssetInfo: {
    parameters: {
      path: {
        site_id: string;
        asset_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["asset"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  updateSiteAsset: {
    parameters: {
      path: {
        site_id: string;
        asset_id: string;
      };
      query: {
        state: string;
      };
    };
    responses: {
      /** Updated */
      200: {
        content: {
          "application/json": components["schemas"]["asset"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  deleteSiteAsset: {
    parameters: {
      path: {
        site_id: string;
        asset_id: string;
      };
    };
    responses: {
      /** Deleted */
      204: never;
      default: components["responses"]["error"];
    };
  };
  getSiteAssetPublicSignature: {
    parameters: {
      path: {
        site_id: string;
        asset_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["assetPublicSignature"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  getSiteFileByPathName: {
    parameters: {
      path: {
        site_id: string;
        file_path: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["file"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  /** Purges cached content from Netlify's CDN. Supports purging by Cache-Tag. */
  purgeCache: {
    responses: {
      /** OK */
      202: unknown;
      /** Invalid request parameters */
      400: unknown;
      /** Site not found */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["purge"];
      };
    };
  };
  listSiteSnippets: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["snippet"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  createSiteSnippet: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      201: {
        content: {
          "application/json": components["schemas"]["snippet"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: components["requestBodies"]["snippet"];
  };
  getSiteSnippet: {
    parameters: {
      path: {
        site_id: string;
        snippet_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["snippet"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  updateSiteSnippet: {
    parameters: {
      path: {
        site_id: string;
        snippet_id: string;
      };
    };
    responses: {
      /** No content */
      204: never;
      default: components["responses"]["error"];
    };
    requestBody: components["requestBodies"]["snippet"];
  };
  deleteSiteSnippet: {
    parameters: {
      path: {
        site_id: string;
        snippet_id: string;
      };
    };
    responses: {
      /** No content */
      204: never;
      default: components["responses"]["error"];
    };
  };
  getSiteMetadata: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["metadata"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  updateSiteMetadata: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** No content */
      204: never;
      default: components["responses"]["error"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["metadata"];
      };
    };
  };
  listSiteBuildHooks: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["buildHook"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  createSiteBuildHook: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["buildHook"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: components["requestBodies"]["buildHookSetup"];
  };
  getSiteBuildHook: {
    parameters: {
      path: {
        site_id: string;
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["buildHook"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  updateSiteBuildHook: {
    parameters: {
      path: {
        site_id: string;
        id: string;
      };
    };
    responses: {
      /** No content */
      204: never;
      default: components["responses"]["error"];
    };
    requestBody: components["requestBodies"]["buildHookSetup"];
  };
  deleteSiteBuildHook: {
    parameters: {
      path: {
        site_id: string;
        id: string;
      };
    };
    responses: {
      /** No content */
      204: never;
      default: components["responses"]["error"];
    };
  };
  listSiteDeploys: {
    parameters: {
      path: {
        site_id: string;
      };
      query: {
        "deploy-previews"?: boolean;
        production?: boolean;
        state?:
          | "new"
          | "pending_review"
          | "accepted"
          | "rejected"
          | "enqueued"
          | "building"
          | "uploading"
          | "uploaded"
          | "preparing"
          | "prepared"
          | "processing"
          | "processed"
          | "ready"
          | "error"
          | "retrying";
        branch?: string;
        "latest-published"?: boolean;
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["perPage"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["deploy"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  createSiteDeploy: {
    parameters: {
      path: {
        site_id: string;
      };
      query: {
        "deploy-previews"?: boolean;
        production?: boolean;
        state?:
          | "new"
          | "pending_review"
          | "accepted"
          | "rejected"
          | "enqueued"
          | "building"
          | "uploading"
          | "uploaded"
          | "preparing"
          | "prepared"
          | "processing"
          | "processed"
          | "ready"
          | "error"
          | "retrying";
        branch?: string;
        "latest-published"?: boolean;
        title?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["deploy"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: components["requestBodies"]["deployFiles"];
  };
  getSiteDeploy: {
    parameters: {
      path: {
        site_id: string;
        deploy_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["deploy"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  updateSiteDeploy: {
    parameters: {
      path: {
        site_id: string;
        deploy_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["deploy"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: components["requestBodies"]["deployFiles"];
  };
  deleteSiteDeploy: {
    parameters: {
      path: {
        deploy_id: string;
        site_id: string;
      };
    };
    responses: {
      /** No content */
      204: never;
      default: components["responses"]["error"];
    };
  };
  cancelSiteDeploy: {
    parameters: {
      path: {
        deploy_id: string;
      };
    };
    responses: {
      /** Cancelled */
      201: {
        content: {
          "application/json": components["schemas"]["deploy"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  restoreSiteDeploy: {
    parameters: {
      path: {
        site_id: string;
        deploy_id: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["deploy"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  listSiteBuilds: {
    parameters: {
      path: {
        site_id: string;
      };
      query: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["perPage"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["build"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  createSiteBuild: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["build"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["buildSetup"];
      };
    };
  };
  listSiteDeployedBranches: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["deployedBranch"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * [Beta] Unlinks the repo from the site.
   *
   * This action will also:
   * - Delete associated deploy keys
   * - Delete outgoing webhooks for the repo
   * - Delete the site's build hooks
   */
  unlinkSiteRepo: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["site"];
        };
      };
      /** Site not found */
      404: unknown;
    };
  };
  getSiteBuild: {
    parameters: {
      path: {
        build_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["build"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  updateSiteBuildLog: {
    parameters: {
      path: {
        build_id: string;
      };
    };
    responses: {
      /** No content */
      204: never;
      default: components["responses"]["error"];
    };
  };
  notifyBuildStart: {
    parameters: {
      path: {
        build_id: string;
      };
      query: {
        buildbot_version?: string;
        build_version?: string;
      };
    };
    responses: {
      /** No content */
      204: never;
      default: components["responses"]["error"];
    };
  };
  getAccountBuildStatus: {
    parameters: {
      path: {
        account_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["buildStatus"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  getDNSForSite: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["dnsZone"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  configureDNSForSite: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["dnsZone"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  rollbackSiteDeploy: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** No content */
      204: never;
      default: components["responses"]["error"];
    };
  };
  getDeploy: {
    parameters: {
      path: {
        deploy_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["deploy"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  deleteDeploy: {
    parameters: {
      path: {
        deploy_id: string;
      };
    };
    responses: {
      /** No content */
      204: never;
      default: components["responses"]["error"];
    };
  };
  lockDeploy: {
    parameters: {
      path: {
        deploy_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["deploy"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  unlockDeploy: {
    parameters: {
      path: {
        deploy_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["deploy"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  uploadDeployFile: {
    parameters: {
      path: {
        deploy_id: string;
        path: string;
      };
      query: {
        size?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["file"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: components["requestBodies"]["uploadDeployFileFileBody"];
  };
  uploadDeployFunction: {
    parameters: {
      path: {
        deploy_id: string;
        name: string;
      };
      query: {
        runtime?: string;
        invocation_mode?: string;
        timeout?: number;
        size?: number;
      };
      header: {
        "X-Nf-Retry-Count"?: components["parameters"]["retryCount"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["function"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: components["requestBodies"]["uploadDeployFileFileBody"];
  };
  listFormSubmissions: {
    parameters: {
      path: {
        form_id: string;
      };
      query: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["perPage"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["submission"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  listHooksBySiteId: {
    parameters: {
      query: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["hook"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  createHookBySiteId: {
    parameters: {
      query: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      201: {
        content: {
          "application/json": components["schemas"]["hook"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: components["requestBodies"]["hook"];
  };
  getHook: {
    parameters: {
      path: {
        hook_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["hook"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  updateHook: {
    parameters: {
      path: {
        hook_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["hook"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: components["requestBodies"]["hook"];
  };
  deleteHook: {
    parameters: {
      path: {
        hook_id: string;
      };
    };
    responses: {
      /** No content */
      204: never;
    };
  };
  enableHook: {
    parameters: {
      path: {
        hook_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["hook"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  listHookTypes: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["hookType"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  createTicket: {
    parameters: {
      query: {
        client_id: string;
      };
    };
    responses: {
      /** ok */
      201: {
        content: {
          "application/json": components["schemas"]["ticket"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  showTicket: {
    parameters: {
      path: {
        ticket_id: string;
      };
    };
    responses: {
      /** ok */
      200: {
        content: {
          "application/json": components["schemas"]["ticket"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  exchangeTicket: {
    parameters: {
      path: {
        ticket_id: string;
      };
    };
    responses: {
      /** ok */
      201: {
        content: {
          "application/json": components["schemas"]["accessToken"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  listDeployKeys: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["deployKey"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  createDeployKey: {
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["deployKey"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  getDeployKey: {
    parameters: {
      path: {
        key_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["deployKey"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  deleteDeployKey: {
    parameters: {
      path: {
        key_id: string;
      };
    };
    responses: {
      /** Not Content */
      204: never;
      default: components["responses"]["error"];
    };
  };
  /** **Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables. */
  listSitesForAccount: {
    parameters: {
      query: {
        name?: string;
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["perPage"];
      };
      path: {
        account_slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["site"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  /** **Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [createEnvVars](#tag/environmentVariables/operation/createEnvVars) to create environment variables for a site. */
  createSiteInTeam: {
    parameters: {
      query: {
        configure_dns?: boolean;
      };
      path: {
        account_slug: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["site"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["siteSetup"];
      };
    };
  };
  listMembersForAccount: {
    parameters: {
      path: {
        account_slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["member"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  addMemberToAccount: {
    parameters: {
      path: {
        account_slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["member"][];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["accountAddMemberSetup"];
      };
    };
  };
  getAccountMember: {
    parameters: {
      path: {
        account_slug: string;
        member_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["member"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  updateAccountMember: {
    parameters: {
      path: {
        account_slug: string;
        member_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["member"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["accountUpdateMemberSetup"];
      };
    };
  };
  removeAccountMember: {
    parameters: {
      path: {
        account_slug: string;
        member_id: string;
      };
    };
    responses: {
      /** Not Content */
      204: never;
      default: components["responses"]["error"];
    };
  };
  listPaymentMethodsForUser: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["paymentMethod"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  listAccountTypesForUser: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["accountType"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  listAccountsForUser: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["accountMembership"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  createAccount: {
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["accountMembership"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["accountSetup"];
      };
    };
  };
  getAccount: {
    parameters: {
      path: {
        account_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["accountMembership"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  updateAccount: {
    parameters: {
      path: {
        account_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["accountMembership"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["accountUpdateSetup"];
      };
    };
  };
  cancelAccount: {
    parameters: {
      path: {
        account_id: string;
      };
    };
    responses: {
      /** Not Content */
      204: never;
      default: components["responses"]["error"];
    };
  };
  listAccountAuditEvents: {
    parameters: {
      path: {
        account_id: string;
      };
      query: {
        query?: string;
        log_type?: string;
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["perPage"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["auditLog"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  listFormSubmission: {
    parameters: {
      path: {
        submission_id: string;
      };
      query: {
        query?: string;
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["perPage"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["submission"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  deleteSubmission: {
    parameters: {
      path: {
        submission_id: string;
      };
    };
    responses: {
      /** Deleted */
      204: never;
      default: components["responses"]["error"];
    };
  };
  listServiceInstancesForSite: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["serviceInstance"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  createServiceInstance: {
    parameters: {
      path: {
        site_id: string;
        addon: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["serviceInstance"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: components["requestBodies"]["createServiceInstanceConfig"];
  };
  showServiceInstance: {
    parameters: {
      path: {
        site_id: string;
        addon: string;
        instance_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["serviceInstance"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  updateServiceInstance: {
    parameters: {
      path: {
        site_id: string;
        addon: string;
        instance_id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      default: components["responses"]["error"];
    };
    requestBody: components["requestBodies"]["createServiceInstanceConfig"];
  };
  deleteServiceInstance: {
    parameters: {
      path: {
        site_id: string;
        addon: string;
        instance_id: string;
      };
    };
    responses: {
      /** Deleted */
      204: never;
      default: components["responses"]["error"];
    };
  };
  getServices: {
    parameters: {
      query: {
        search?: string;
      };
    };
    responses: {
      /** services */
      200: {
        content: {
          "application/json": components["schemas"]["service"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  showService: {
    parameters: {
      path: {
        addonName: string;
      };
    };
    responses: {
      /** services */
      200: {
        content: {
          "application/json": components["schemas"]["service"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  showServiceManifest: {
    parameters: {
      path: {
        addonName: string;
      };
    };
    responses: {
      /** retrieving from provider */
      201: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      default: components["responses"]["error"];
    };
  };
  getCurrentUser: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["user"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  getSplitTests: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** split_tests */
      200: {
        content: {
          "application/json": components["schemas"]["splitTests"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  createSplitTest: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["splitTest"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: components["requestBodies"]["splitTestSetup"];
  };
  getSplitTest: {
    parameters: {
      path: {
        site_id: string;
        split_test_id: string;
      };
    };
    responses: {
      /** split_test */
      200: {
        content: {
          "application/json": components["schemas"]["splitTest"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  updateSplitTest: {
    parameters: {
      path: {
        site_id: string;
        split_test_id: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["splitTest"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: components["requestBodies"]["splitTestSetup"];
  };
  enableSplitTest: {
    parameters: {
      path: {
        site_id: string;
        split_test_id: string;
      };
    };
    responses: {
      /** enable */
      204: never;
      default: components["responses"]["error"];
    };
  };
  disableSplitTest: {
    parameters: {
      path: {
        site_id: string;
        split_test_id: string;
      };
    };
    responses: {
      /** disabled */
      204: never;
      default: components["responses"]["error"];
    };
  };
  getDnsZones: {
    parameters: {
      query: {
        account_slug?: string;
      };
    };
    responses: {
      /** get all DNS zones the user has access to */
      200: {
        content: {
          "application/json": components["schemas"]["dnsZones"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  createDnsZone: {
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["dnsZone"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["dnsZoneSetup"];
      };
    };
  };
  getDnsZone: {
    parameters: {
      path: {
        zone_id: string;
      };
    };
    responses: {
      /** get a single DNS zone */
      200: {
        content: {
          "application/json": components["schemas"]["dnsZone"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  deleteDnsZone: {
    parameters: {
      path: {
        zone_id: string;
      };
    };
    responses: {
      /** delete a single DNS zone */
      204: never;
      default: components["responses"]["error"];
    };
  };
  transferDnsZone: {
    parameters: {
      path: {
        zone_id: string;
      };
      query: {
        /** the account of the dns zone */
        account_id: string;
        /** the account you want to transfer the dns zone to */
        transfer_account_id: string;
        /** the user you want to transfer the dns zone to */
        transfer_user_id: string;
      };
    };
    responses: {
      /** transfer a DNS zone to another account */
      200: {
        content: {
          "application/json": components["schemas"]["dnsZone"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  getDnsRecords: {
    parameters: {
      path: {
        zone_id: string;
      };
    };
    responses: {
      /** get all DNS records for a single DNS zone */
      200: {
        content: {
          "application/json": components["schemas"]["dnsRecords"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  createDnsRecord: {
    parameters: {
      path: {
        zone_id: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["dnsRecord"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["dnsRecordCreate"];
      };
    };
  };
  getIndividualDnsRecord: {
    parameters: {
      path: {
        zone_id: string;
        dns_record_id: string;
      };
    };
    responses: {
      /** get a single DNS record */
      200: {
        content: {
          "application/json": components["schemas"]["dnsRecord"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  deleteDnsRecord: {
    parameters: {
      path: {
        zone_id: string;
        dns_record_id: string;
      };
    };
    responses: {
      /** record deleted */
      204: never;
      default: components["responses"]["error"];
    };
  };
  listSiteDevServers: {
    parameters: {
      path: {
        site_id: string;
      };
      query: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["perPage"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["devServer"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  createSiteDevServer: {
    parameters: {
      path: {
        site_id: string;
      };
      query: {
        branch?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["devServer"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  deleteSiteDevServers: {
    parameters: {
      path: {
        site_id: string;
      };
      query: {
        branch?: string;
      };
    };
    responses: {
      /** OK */
      202: unknown;
      default: components["responses"]["error"];
    };
  };
  getSiteDevServer: {
    parameters: {
      path: {
        site_id: string;
        dev_server_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["devServer"];
        };
      };
    };
  };
  listSiteDevServerHooks: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["devServerHook"][];
        };
      };
      default: components["responses"]["error"];
    };
  };
  createSiteDevServerHook: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["devServerHook"];
        };
      };
      default: components["responses"]["error"];
    };
    requestBody: components["requestBodies"]["devServerHookSetup"];
  };
  getSiteDevServerHook: {
    parameters: {
      path: {
        site_id: string;
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["devServerHook"];
        };
      };
      default: components["responses"]["error"];
    };
  };
  updateSiteDevServerHook: {
    parameters: {
      path: {
        site_id: string;
        id: string;
      };
    };
    responses: {
      /** No content */
      204: never;
      default: components["responses"]["error"];
    };
    requestBody: components["requestBodies"]["devServerHookSetup"];
  };
  deleteSiteDevServerHook: {
    parameters: {
      path: {
        site_id: string;
        id: string;
      };
    };
    responses: {
      /** No content */
      204: never;
      default: components["responses"]["error"];
    };
  };
}

export interface external {}
